//This file is autogenerated
#pragma once
const char HTML_401[] = R"(<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title></title>
</head>
<body>
    Nieprawidłowe hasło.
    <br>
    Nie posiadasz uprawnień, aby zobaczyć tę stonę.
</body>
</html>)";
const char HTML_404[] = R"(<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <title>Sterownik</title>
</head>
<body>
    <h1>Error 404 Not found</h1>
</body>
</html>)";
const char JS_APP[] = R"(const apiUrl = '';
const timeElement = document.getElementById('time');
const alarmsListElement = document.getElementById('alarms-list');
const planSelectElement = document.getElementById('plan-select');
const planName = document.getElementById('planName');
const saveButton = document.getElementById('save-button');
const resetButton = document.getElementById('reset-button');
const alarmNewText = document.getElementById('alarm-new');
const weekdaysElements = [
    document.getElementById('weekday-btn-pn'),
    document.getElementById('weekday-btn-wt'),
    document.getElementById('weekday-btn-sr'),
    document.getElementById('weekday-btn-cz'),
    document.getElementById('weekday-btn-pt'),
    document.getElementById('weekday-btn-so'),
    document.getElementById('weekday-btn-ni'),
];
const loginUsername = document.getElementById('username');
const loginPassword = document.getElementById('password');
const loginPasswordConfirm = document.getElementById('password-confirm');
const changeLoginButton = document.getElementById('change-password');
const loginError = document.getElementById('login-error');
const loginSuccess = document.getElementById('login-success');
const loadingScreenElement = document.getElementById('loading');
const wrapperElement = document.getElementById('wrapper');
const loadingText = document.getElementById('load-text');
const unsavedAlarmsElement = document.getElementById('unsaved-alarms');

const blankAlarm = '<span class="blank alarm-btn"></span><span class="alarm-text"></span><span class="btn-remove alarm-btn">✖</span>';

const loadPromises = [];

const api = (path) => {
    if (!apiUrl) return path;
    return apiUrl + '/' + path;
};

const minutesToTime = (minutes) => {
    const hours = parseInt(minutes / 60).toString();
    const minutess = parseInt(minutes % 60).toString();

    return `${hours.padStart(2, '0')}:${minutess.padStart(2, '0')}`;
};

let selectedPlan = 0;

let alarms = [];
let weekdays = 0;

const redrawWeekdays = () => {
    weekdaysElements.forEach((element, index) => {
        const mask = 1 << index;

        if ((weekdays & mask) != 0) {
            element.classList.add('weekday-active');
        } else {
            element.classList.remove('weekday-active');
        }
    });
};

const addNewAlarm = () => {
    unsavedAlarmsElement.classList.remove('display-none');

    const [hours, minutes] = alarmNewText.value.split(':').map(Number);

    if (isNaN(hours) || isNaN(minutes)) return;
    if (hours > 23 || hours < 0) return;
    if (minutes > 59 || minutes < 0) return;

    const alarmMinutes = hours * 60 + minutes;
    if (alarms.includes(alarmMinutes)) return;

    alarms.push(alarmMinutes);
    alarms.sort((a, b) => a - b);
    alarmNewText.value = '';
    constructList();
};

const getAlarms = async (plan) => {
    const res = await fetch(api(`alarms/${plan ?? 0}`));
    const data = await res.json();
    data.alarms.reverse();
    planName.value = data.name;
    weekdays = data.weekdays;
    alarms = data.alarms;
};

const constructList = () => {
    alarmsListElement.innerHTML = '';

    if (alarms.length) {
        alarms.forEach((alarm, index) => {
            const element = document.createElement('li');
            element.innerHTML = blankAlarm;

            const [input] = element.getElementsByClassName('alarm-text');
            input.innerText = minutesToTime(alarm);

            const buttons = element.getElementsByClassName('alarm-btn');
            const [_, removeButton] = buttons;

            removeButton.addEventListener('click', () => {
                alarms.splice(index, 1);
                constructList();
                unsavedAlarmsElement.classList.remove('display-none');
            });

            alarmsListElement.appendChild(element);
        });
    }
};

loadPromises.push(getAlarms(planSelectElement.value).then(a => {
    constructList();
    redrawWeekdays();
}));

loadPromises.push(fetch(api('clock')).then(res => {
    res.json().then(data => {
        let inc = 0;
        setInterval(() => {
            const date = new Date((data.epoch + inc) * 1000);
            timeElement.innerText = `${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}`;
            inc++;
        }, 1000);

        document.getElementById("timezone").innerText = data.timezone;
        document.getElementById("mac-address").innerText = data.mac;
    });
}));

planSelectElement.addEventListener('change', () => {
    unsavedAlarmsElement.classList.add('display-none');
    getAlarms(planSelectElement.value).then(() => {
        constructList();
        redrawWeekdays();
    });
});

resetButton.addEventListener('click', () => {
    unsavedAlarmsElement.classList.add('display-none');
    getAlarms(planSelectElement.value).then(() => {
        constructList();
    });
});

alarmNewText.addEventListener('keydown', (e) => {
    if (e.key == 'Enter') {
        addNewAlarm();
    }
});

weekdaysElements.forEach((element, index) => {
    element.addEventListener('click', () => {
        unsavedAlarmsElement.classList.remove('display-none');
        weekdays ^= 1 << index;
        redrawWeekdays();
    });
});

saveButton.addEventListener('click', () => {
    unsavedAlarmsElement.classList.add('display-none');
    fetch(api(`alarms/${planSelectElement.value}`), {
        body: JSON.stringify({
            alarms: alarms.reverse(),
            weekdays,
            name: planName.value,
        }),
        method: 'POST',
    });
});

changeLoginButton.addEventListener('click', () => {
    loginError.innerText = "";
    loginSuccess.innerText = "";
    const usernameVal = loginUsername.value;
    const passwordVal = loginPassword.value;
    const passwordConfirmVal = loginPasswordConfirm.value;

    if (!passwordVal || !passwordConfirmVal || !usernameVal) {
        loginError.innerText = "Nie wypełniono pól";
        return;
    }
    
    if (passwordVal !== passwordConfirmVal) {
        loginError.innerText = "Hasła nie są takie same";
        return;
    }

    if (usernameVal.length > 25 || passwordVal.length > 25) {
        loginError.innerText = "Login lub hasło za długie. maksymalnie 25 znaków";
        return;
    }

    const base64auth = btoa(`${usernameVal}:${passwordVal}`);

    fetch(api('password'), {
        method: 'POST',
        body: JSON.stringify({password: base64auth}),
    }).then((res) => {
        if (res.ok) {
            loginSuccess.innerText = "Hasło zostało zmienione. Strona za chwilę zostanie odświeżona.";
            setTimeout(() => {
                location.reload();
            }, 5000);
        } else {
            loginError.innerText = "Nie udało się zmienić hasła.";
        }
    })
    .catch(() => {
        loginError.innerText = "Nie udało się zmienić hasła.";
    });
});

Promise.all(loadPromises).then(() => {
    loadingScreenElement.classList.add('display-none');
    wrapperElement.classList.remove('display-none');
})
.catch((p) => {
    console.error(p);
    loadingText.innerText = "Ładowanie nie powiodło się.";
});)";
const char HTML_INDEX[] = R"(<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <title>Sterownik dzwonków - AZBEST-3</title>
    <link rel="stylesheet" href="style.css">
    <script src="app-index.js" defer></script>
    <script src="app.js" defer></script>
</head>
<body>
    <div id="loading">
        <div id="load-text">
            Trwa ładowanie strony...
        </div>
    </div>
    <div id="wrapper" class="display-none">
        <div id="content">
            <div class="section-wrapper">
                <div class="section">
                    <div class="time"><span id="time">00:00:00</span></div>
                    <div class="time-info">
                        <div class="time-info-block">
                            Strefa czasowa:
                            <span id="timezone"></span>
                        </div>
                        <div class="time-info-block">
                            Adres MAC:
                            <span id="mac-address"></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="section-wrapper">
                <div class="section">
                    <div class="plan">
                        <select name="plan" id="plan-select">
                            <option value="0">Plan 1</option>
                            <option value="1">Plan 2</option>
                            <option value="2">Plan 3</option>
                            <option value="3">Plan 4</option>
                            <option value="4">Plan 5</option>
                        </select>
                        <br/>
                        <input type="text" name="planName" id="planName">
                        <br/>
                        <div id="weekdays">
                            <div class="weekday" id="weekday-btn-pn">Pn</div>
                            <div class="weekday" id="weekday-btn-wt">Wt</div>
                            <div class="weekday" id="weekday-btn-sr">Śr</div>
                            <div class="weekday" id="weekday-btn-cz">Cz</div>
                            <div class="weekday" id="weekday-btn-pt">Pt</div>
                            <div class="weekday" id="weekday-btn-so">So</div>
                            <div class="weekday" id="weekday-btn-ni">Ni</div>
                        </div>
                    </div>
                    <div class="alarms">
                        <div id="alarms-list-header">
                            <input type="text" class="alarm-text" id="alarm-new">
                        </div>
                        <ol id="alarms-list">
                            <!-- <li><span class="btn-up alarm-btn">⬆</span><span class="btn-down alarm-btn">⬇</span><input type="text" class="alarm-text"><span class="btn-remove alarm-btn">✖</span><span class="blank alarm-btn"></span></li>
                            <li><span class="btn-up alarm-btn">⬆</span><span class="btn-down alarm-btn">⬇</span><input type="text" class="alarm-text"><span class="btn-remove alarm-btn">✖</span><span class="blank alarm-btn"></span></li>
                            <li><span class="btn-new alarm-btn" id="alarms-btn-new">✏</span></li> -->
                        </ol>
                    </div>
                </div>
                <div class="section-footer">
                    <div id="unsaved-alarms" class="display-none">
                        Masz niezapisane zmiany!
                    </div>
                    <button id="reset-button">Reset</button>
                    <button id="save-button">Zapisz</button>
                </div>
            </div>
            <div class="section-wrapper">
                <div class="section">
                    <div id="login">
                        <div class="loginBox" style="text-align: left; font-size: 1.1rem;">
                            Zmiana nazwy użytkownika i hasła:
                            <br>
                            <span style="font-size: 0.8rem; color: #888">Maksymalnie 25 znaków dla nazwy użytkownika i hasła</span>
                        </div>
                        <div class="loginBox">
                            Nazwa użytkownika: 
                            <input type="text" name="" class="loginTextInput" id="username">
                        </div>
                        <div class="loginBox">
                            Hasło:
                            <input type="password" name="" class="loginTextInput" id="password">
                        </div>
                        <div class="loginBox">
                            Powtórz hasło:
                            <input type="password" name="" class="loginTextInput" id="password-confirm">
                        </div>
                        <div class="loginBox" id="login-error" style="text-align: center; color: #f22; padding-bottom: 0; padding-top: 0; font-size: 1.1rem;"></div>
                        <div class="loginBox" id="login-success" style="text-align: center; color: #2f2; padding-bottom: 0; padding-top: 0; font-size: 1.1rem;"></div>
                        <div class="loginBox">
                            <button id="change-password">Zmień hasło</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="separator"></div>
        </div>
    </div>
</body>
</html>)";
const char CSS_STYLE[] = R"(body {
	margin: 0;
	padding: 0;
	background-color: #161616;
	color: #fff;
	font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
	--btn-color: #2142fda2;
	--btn-color-select: #3251ffc9;
}

a {
	color: #fff;
}

#wrapper {
	padding: 0;
	margin: 0;
	height: 98vh;
}

#content {
	width: 80%;
	height: 95%;
	margin-right: auto;
	margin-left: auto;
	border-radius: 15px;
	margin-top: 1vh;
}

.section-wrapper {
	border-radius: 15px;
	width: 100%;
	min-height: 100px;
	background-color: rgba(36, 40, 50, 1);
	background-image: linear-gradient(139deg, rgba(36, 40, 50, 1) 0%, rgba(36, 40, 50, 1) 0%, rgba(37, 28, 40, 1) 100%);
	backdrop-filter: blur(5px);
	border-bottom: #00000055 solid;
	margin-bottom: 6px;
}

.section {
	display: flex;
}

.section-header {
	background-color: #1d2b77d2;
	border-top-left-radius: 15px;
	border-top-right-radius: 15px;
	padding: 6px;
	padding-left: 16px;
}

.time {
	height: 100%;
	text-align: center;
	margin-top: 40px;
	margin-bottom: 40px;
	font-size: 5vw;
	font-weight: bold;
	width: 50%;
	font-family: monospace;
}

.time-info {
	width: 50%;
	height: 100%;
	text-align: center;
	margin-top: 40px;
	margin-bottom: 40px;
	font-size: 1vw;
}

.plan {
	height: 100%;
	width: 33%;
	font-size: 3vw;
	font-weight: bold;
	margin-top: 40px;
	margin-bottom: 40px;
	align-self: center;
	text-align: center;
}

.alarms {
	height: 100%;
	min-height: 500px;
	width: 66%;
	margin-top: 10px;
	margin-bottom: 10px;
	overflow-y: scroll;
	height: 20vh;
	background-color: #18181888;
	border-radius: 15px;
}

#alarms-list li:nth-child(even) {
	background-color: #00000020;
}

#alarms-list {
	list-style-type: none;
	margin: 0;
	margin-top: 40px;
	padding: 0;
	border: #00000004 solid;
}

#alarms-list>li {
	padding: 6px;
	display: flex;
	align-items: center;
	justify-content: center;
	gap: 10px;
	font-size: 1.5rem;
}

#program-save {
	width: 100%;
}

.alarm-btn {
	border-radius: 100%;
	width: 3vh;
	height: 3vh;
	background-color: #f00;
	visibility: hidden;
	margin: 0;
	padding: 0;
	cursor: pointer;
	font-size: 1rem;
	text-align: center;
	background-color: #0000008a;
	user-select: none
}

#alarms-list>li:hover>.alarm-btn {
	visibility: visible;
}

#alarms-list>li:hover>.blank {
	display: inline-block;
	visibility: hidden;
}

#alarms-list-header {
	background-color: #161516;
	padding: 6px;
	align-items: center;
	justify-content: center;
	font-size: 1.5rem;
	position: fixed;
	width: 64%;
	/* min-height: 20px; */
	border-top-left-radius: 15px;
	border-top-right-radius: 15px;
	text-align: center;
}

.alarm-text {
	background: #00000055;
	width: 5vw;
	border: none;
	color: #fff;
	height: 3vh;
	border-radius: 4px;
	font-size: 1.4vw;
	text-align: center;
}

.btn-up {
	background-color: var(--btn-color);
}

.btn-up:hover {
	background-color: var(--btn-color-select);
}

.btn-down {
	background-color: var(--btn-color);
}

.btn-down:hover {
	background-color: var(--btn-color-select);
}

.btn-remove {
	background-color: #910f03;
}

.btn-remove:hover {
	background-color: #b6281c;
}

.btn-new {
	background-color: #077c0780;
	visibility: visible;
}

.btn-new:hover {
	background-color: #1bb11b80;
}

#plan-select {
	padding: 2vh 2vw;
	background-color: #16161669;
	border: #00000004 solid;
	border-radius: 15px;
	font-size: 3vw;
	font-weight: bold;
	color: #fff;
}

#plan-select>option {
	background-color: rgba(36, 40, 50, 1);
	background-image: linear-gradient(139deg, rgba(36, 40, 50, 1) 0%, rgba(36, 40, 50, 1) 0%, rgba(37, 28, 40, 1) 100%);
	color: #fff;
}

.section-footer {
	min-height: 3vh;
	display: flex;
	justify-content: flex-end;
	margin: 20px;
	gap: 10px;
}

#save-button {
	padding: 10px;
	padding-left: 40px;
	padding-right: 40px;
	border-radius: 15px;
	background-color: #2d0f96c7;
	color: #fff;
	font-weight: bold;
	font-size: 1em;
	font-family: sans-serif;
	cursor: pointer;
	border: #888 solid 2px;
}

#save-button:hover {
	background-color: #462d9cc7;
}

#save-button:active {
	background-color: #5a45a0c7;
}

#reset-button {
	font-size: 1em;
	font-family: sans-serif;
	cursor: pointer;
	color: #fff;
	background-color: #0a0324c7;
	border-radius: 15px;
	border: #888 solid 2px;
}

#reset-button:hover {
	background-color: #2f2455c7;
}

#reset-button:active {
	background-color: #504968c7;
}

#planName {
	border-radius: 15px;
	background-color: rgba(36, 40, 50, 1);
	background-image: linear-gradient(139deg, rgba(36, 40, 50, 1) 0%, rgba(36, 40, 50, 1) 0%, rgba(37, 28, 40, 1) 100%);
	border: #0000006b solid 2px;
	width: 18vw;
	height: 4vh;
	color: #fff;
	font-size: 0.6em;
	font-family: sans-serif;
	padding: 5px;
	text-align: center;
	letter-spacing: 0.1vw;
	outline: none;
}

#planName:focus {
	border: #a8a8a89a solid 2px;
}

.alarm-list-add {
	position: sticky;
	top: 2px;
}

#weekdays {
	display: flex;
	justify-content: center;
	gap: 0.2vw;
	margin-top: 20px;
}

.weekday {
	font-size: 1vw;
	padding: 1vw;
	border-radius: 100%;
	background-color: rgba(17, 15, 116, 0.486);
	width: 1vw;
	height: 1vw;
	cursor: pointer;
	border: #1e09468a solid 2px;
	text-align: center;
	user-select: none
}

.weekday-active {
	background-color: rgba(8, 94, 253, 0.685);
}

.weekday:hover {
	filter: brightness(220%);
}

#login {
	min-height: 200px;
	font-size: 1em;
	margin-left: auto;
	margin-right: auto;
}

.loginBox {
	text-align: right;
	padding: 1.2vh;
	font-size: 1em;
}

.loginText {
	margin-top: 1vh;
}

.loginTextInput {
	width: 20vw;
	margin-left: 30px;
}

.loginBox>button {
	padding: 10px;
	padding-left: 40px;
	padding-right: 40px;
	border-radius: 15px;
	background-color: #2d0f96c7;
	color: #fff;
	font-weight: bold;
	font-size: 1em;
	font-family: sans-serif;
	cursor: pointer;
	border: #888 solid 2px;
}

.loginBox>button:hover {
	background-color: #462d9cc7;
}

.loginBox>button:active {
	background-color: #5a45a0c7;
}

.separator {
	height: 2vh;
}

#loading {
	width: 100%;
	height: 100%;
	margin: 0;
	padding: 0;
	position: absolute;
	background-color: rgba(36, 40, 50, 1);
	background-image: linear-gradient(139deg, rgba(36, 40, 50, 1) 0%, rgba(36, 40, 50, 1) 0%, rgba(37, 28, 40, 1) 100%);
	z-index: 200;
}

.display-none {
	display: none;
}

#load-text {
	width: 100%;
	text-align: center;
	font-size: 5rem;
	margin-top: 7vh;
}

#unsaved-alarms {
	margin-top: auto;
	margin-bottom: auto;
	font-size: 1.2rem;
})";
